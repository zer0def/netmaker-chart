# Default values for the netmaker helm chart. This is a YAML file.

# -- number of netmaker server replicas to create
replicas: 1

baseDomain: example.com

image:
  # -- The image repo to pull Netmaker image from
  repository: gravitl/netmaker
  # -- Pull Policy for images
  pullPolicy: IfNotPresent
  # -- Override the image tag to pull
  # tag: ""

# -- override the name for netmaker objects
nameOverride: ""

# -- override the full name for netmaker objects
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- Name of SA to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- pod annotations to add
podAnnotations: {}

# -- pod security contect to add
podSecurityContext: {}
# fsGroup: 2000

persistence:
  sharedData:
    # if not specified, this will create HELM.RELEASE.NAME-shared-data-pvc by default
    existingClaim: ""

ui:
  # -- how many UI replicas to create
  replicas: 1

mq:
  endpoint: ws://netmaker-mqtt:1883
  username: netmaker
  password: 3yyerWGdds43yegGR
  # name of an existing secret to use for mq password. If set, ignores mq.password
  existingSecret: ''
  # name of key in existing secret to grab password from. If set, ignores mq.password
  secretKey: ''

dns:
  # -- whether or not to deploy coredns
  enabled: false
  # existingClaim, if not set, defaults to HELM.RELEASE.NAME-dns-pvc
  existingClaim: ''
  storageSize: 128Mi
  RWX:
    storageClassName: ""

setIpForwarding:
  enabled: true

service:
  # -- type for netmaker server services
  type: ClusterIP
  # -- port for API service
  restPort: 8081
  # -- port for UI service
  uiPort: 80

ingress:
  # -- attempts to configure ingress if true
  enabled: true
  className: "nginx"
  tls:
    enabled: false
    issuerName: "letsencrypt-prod"
  annotations:
    ui: {}
    rest: {}
    base:
      # -- annotation to generate ACME certs if available
      kubernetes.io/ingress.allow-http: "false"
    tls:
      # -- use acme cert if available
      kubernetes.io/tls-acme: "true"
    nginx:
      # -- Redirect http to https
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      # -- destination addr for route
      nginx.ingress.kubernetes.io/rewrite-target: /
    traefik:
      # -- Redirect to https
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      # -- Redirect to https permanently
      traefik.ingress.kubernetes.io/redirect-permanent: "true"
      # -- rule type
      traefik.ingress.kubernetes.io/rule-type: "PathPrefixStrip"
  hostPrefix:
    # -- ui route subdomain
    ui: 'dashboard.'
    # -- api (REST) route subdomain
    rest: 'api.'
    # -- mqtt route subdomain
    broker: 'broker.'

wireguard:
  # -- whether or not to use WireGuard on server
  enabled: true
  service:
    annotations: {}
    serviceType: NodePort
  # -- whether or not to use Kernel WG (should be false unless WireGuard is installed on hosts).
  kernel: false
  # -- max number of networks that Netmaker will support if running with WireGuard enabled
  networkLimit: 10

# https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
postgresql:
  # set to false if you want to use an existing postgres server.
  # if false, you must set the externalDatabase parameters
  enabled: true
  # postgresqlHostname: preexisting-postgresql
  # postgresqlPort: 5432
  auth:
    database: netmaker
    username: netmaker
    # you must set a password; the password generated by the postgresql chart will
    # be rotated on each upgrade:
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#upgrade
    password: ""
    # Set the password for the "postgres" admin user
    # set this to the same value as above if you've previously installed
    # this chart and you're having problems getting mastodon to connect to the DB
    # postgresPassword: ""
    # you can also specify the name of an existing Secret
    # with a key of password set to the password you want
    existingSecret: ""
    secretKeys:
      userPasswordKey: ""
      adminPasswordKey: ""
  persistence:
    existingClaim: ''

# if postgresql.enabled is false, these values are used instead
externalDatabase:
  # type of database, only postgreql supported in this helm chart at this time
  type: postgresql
  # -- postgres host
  host: external.postgres.url
  # -- postgres hosts port
  port: 5432
  # -- postgres username
  username: netmaker
  # -- postgres pass for netmaker user. ignored if existingSecret is set
  password: ""
  # -- postgress db
  database: netmaker
  # use existing secret for netmaker user's password
  existingSecret: ""
  secretKeys:
    passwordKey: ""

# OAuth section - untested
oauth:
  enabled: false
  # AUTH_PROVIDER: must be one of: azure-ad|github|google|oidc
  provider: "oidc"
  existingSecret: ""
  secretKeys:
    # CLIENT_ID - client id of your oauth provider
    clientID:
    # CLIENT_SECRET - client secret of your oauth provider
    clientSecret:
    # FRONTEND_URL - https://dashboard.<netmaker base domain> <-- untested
    frontendURL:
    # OIDC_ISSUER - https://oidc.yourprovider.com - URL of oidc provider
    issuer:
    # AZURE_TENANT - only for azure, you may optionally specify the tenant for the OAuth
    # azureTenant:
